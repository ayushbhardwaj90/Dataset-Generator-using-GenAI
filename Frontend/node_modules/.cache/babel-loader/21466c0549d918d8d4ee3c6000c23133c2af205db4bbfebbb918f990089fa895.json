{"ast":null,"code":"const api = {\n  async request(method, url, data = null, token = null) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    const config = {\n      method,\n      headers\n    };\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Something went wrong');\n    }\n    return response.json();\n  },\n  async login(username, password, API_BASE_URL) {\n    const formData = new URLSearchParams();\n    formData.append('username', username);\n    formData.append('password', password);\n    const response = await fetch(`${API_BASE_URL}/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: formData.toString()\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Login failed');\n    }\n    return response.json();\n  },\n  async register(username, email, password, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/register`, {\n      username,\n      email,\n      password\n    });\n  },\n  async getDomains(token, API_BASE_URL) {\n    return this.request('GET', `${API_BASE_URL}/domains`, null, token);\n  },\n  async generateData(domain, rows, custom_prompt, constraints, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/generate`, {\n      domain,\n      rows,\n      custom_prompt,\n      constraints\n    }, token);\n  },\n  async generateRelationalData(tables, global_constraints, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/generate/relational`, {\n      tables,\n      global_constraints\n    }, token);\n  },\n  async getHistory(token, API_BASE_URL) {\n    return this.request('GET', `${API_BASE_URL}/history`, null, token);\n  },\n  async augmentData(augmentRequest, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/augment`, augmentRequest, token);\n  },\n  // Export functions (simplified for GET, as discussed, for POST would need body)\n  getExportUrl(format, domain, rows, custom_prompt, token, API_BASE_URL) {\n    let url = `${API_BASE_URL}/export/${format}?domain=${domain}&rows=${rows}`;\n    if (custom_prompt) {\n      url += `&custom_prompt=${encodeURIComponent(custom_prompt)}`;\n    }\n    // Constraints are not easily passed via GET for export, as discussed.\n    // For a real app, this would be a POST request or a more complex query param encoding.\n    return url;\n  }\n};\nexport { api };","map":{"version":3,"names":["api","request","method","url","data","token","headers","config","body","JSON","stringify","response","fetch","ok","errorData","json","Error","detail","login","username","password","API_BASE_URL","formData","URLSearchParams","append","toString","register","email","getDomains","generateData","domain","rows","custom_prompt","constraints","generateRelationalData","tables","global_constraints","getHistory","augmentData","augmentRequest","getExportUrl","format","encodeURIComponent"],"sources":["C:/Synthetic dataset generator/Frontend/src/services/api.js"],"sourcesContent":["const api = {\n  async request(method, url, data = null, token = null) {\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    const config = {\n      method,\n      headers,\n    };\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Something went wrong');\n    }\n    return response.json();\n  },\n\n  async login(username, password, API_BASE_URL) {\n    const formData = new URLSearchParams();\n    formData.append('username', username);\n    formData.append('password', password);\n\n    const response = await fetch(`${API_BASE_URL}/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: formData.toString(),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Login failed');\n    }\n    return response.json();\n  },\n\n  async register(username, email, password, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/register`, { username, email, password });\n  },\n\n  async getDomains(token, API_BASE_URL) {\n    return this.request('GET', `${API_BASE_URL}/domains`, null, token);\n  },\n\n  async generateData(domain, rows, custom_prompt, constraints, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/generate`, { domain, rows, custom_prompt, constraints }, token);\n  },\n\n  async generateRelationalData(tables, global_constraints, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/generate/relational`, { tables, global_constraints }, token);\n  },\n\n  async getHistory(token, API_BASE_URL) {\n    return this.request('GET', `${API_BASE_URL}/history`, null, token);\n  },\n\n  async augmentData(augmentRequest, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/augment`, augmentRequest, token);\n  },\n\n  // Export functions (simplified for GET, as discussed, for POST would need body)\n  getExportUrl(format, domain, rows, custom_prompt, token, API_BASE_URL) {\n    let url = `${API_BASE_URL}/export/${format}?domain=${domain}&rows=${rows}`;\n    if (custom_prompt) {\n      url += `&custom_prompt=${encodeURIComponent(custom_prompt)}`;\n    }\n    // Constraints are not easily passed via GET for export, as discussed.\n    // For a real app, this would be a POST request or a more complex query param encoding.\n    return url;\n  }\n};\n\nexport { api };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}