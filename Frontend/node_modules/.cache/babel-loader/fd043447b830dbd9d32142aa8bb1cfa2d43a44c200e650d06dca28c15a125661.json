{"ast":null,"code":"const api = {\n  async request(method, url, data = null, token = null) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    const config = {\n      method,\n      headers\n    };\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Something went wrong');\n    }\n    try {\n      return await response.json();\n    } catch (e) {\n      return response;\n    }\n  },\n  async login(username, password, API_BASE_URL) {\n    const formData = new URLSearchParams();\n    formData.append('username', username);\n    formData.append('password', password);\n    const response = await fetch(`${API_BASE_URL}/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: formData.toString()\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Login failed');\n    }\n    return response.json();\n  },\n  async register(username, email, password, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/register`, {\n      username,\n      email,\n      password\n    });\n  },\n  async forgotPassword(email, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/forgot-password`, {\n      email\n    });\n  },\n  async resetPassword(token, newPassword, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/reset-password`, {\n      token,\n      new_password: newPassword\n    });\n  },\n  async getDomains(token, API_BASE_URL) {\n    return this.request('GET', `${API_BASE_URL}/domains`, null, token);\n  },\n  async generateData(domain, rows, custom_prompt, constraints, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/generate`, {\n      domain,\n      rows,\n      custom_prompt,\n      constraints\n    }, token);\n  },\n  async generateRelationalData(tables, global_constraints, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/generate/relational`, {\n      tables,\n      global_constraints\n    }, token);\n  },\n  async getHistory(token, API_BASE_URL) {\n    return this.request('GET', `${API_BASE_URL}/history`, null, token);\n  },\n  async augmentData(augmentRequest, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/augment`, augmentRequest, token);\n  },\n  // UPDATED EXPORT FUNCTION with better error handling and debugging\n  async exportData(format, domain, rows, custom_prompt, token, API_BASE_URL) {\n    let url = `${API_BASE_URL}/export/${format}?domain=${domain}&rows=${rows}`;\n    if (custom_prompt) {\n      url += `&custom_prompt=${encodeURIComponent(custom_prompt)}`;\n    }\n    console.log('üîç Export URL:', url);\n    console.log('üîç Export format:', format);\n    console.log('üîç Export token:', token ? 'Present' : 'Missing');\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log('üîç Export response status:', response.status);\n      console.log('üîç Export response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        let errorDetail = `HTTP ${response.status}: ${response.statusText}`;\n        try {\n          const errorData = await response.json();\n          errorDetail = errorData.detail || errorDetail;\n          console.error('üîç Export error data:', errorData);\n        } catch {\n          // Response might not be JSON for binary data\n          console.log('üîç Export error: Response not JSON (possibly binary data error)');\n        }\n        throw new Error(errorDetail);\n      }\n      console.log('üîç Export response successful');\n      return response; // Return the response for blob handling\n    } catch (error) {\n      console.error('üîç Export API error:', error);\n      throw error;\n    }\n  }\n};\nexport { api };","map":{"version":3,"names":["api","request","method","url","data","token","headers","config","body","JSON","stringify","response","fetch","ok","errorData","json","Error","detail","e","login","username","password","API_BASE_URL","formData","URLSearchParams","append","toString","register","email","forgotPassword","resetPassword","newPassword","new_password","getDomains","generateData","domain","rows","custom_prompt","constraints","generateRelationalData","tables","global_constraints","getHistory","augmentData","augmentRequest","exportData","format","encodeURIComponent","console","log","status","Object","fromEntries","entries","errorDetail","statusText","error"],"sources":["C:/Synthetic dataset generator/Frontend/src/services/api.js"],"sourcesContent":["const api = {\n  async request(method, url, data = null, token = null) {\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    const config = {\n      method,\n      headers,\n    };\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Something went wrong');\n    }\n    try {\n      return await response.json();\n    } catch (e) {\n      return response;\n    }\n  },\n\n  async login(username, password, API_BASE_URL) {\n    const formData = new URLSearchParams();\n    formData.append('username', username);\n    formData.append('password', password);\n\n    const response = await fetch(`${API_BASE_URL}/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: formData.toString(),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Login failed');\n    }\n    return response.json();\n  },\n\n  async register(username, email, password, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/register`, { username, email, password });\n  },\n\n  async forgotPassword(email, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/forgot-password`, { email });\n  },\n\n  async resetPassword(token, newPassword, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/reset-password`, { token, new_password: newPassword });\n  },\n\n  async getDomains(token, API_BASE_URL) {\n    return this.request('GET', `${API_BASE_URL}/domains`, null, token);\n  },\n\n  async generateData(domain, rows, custom_prompt, constraints, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/generate`, { domain, rows, custom_prompt, constraints }, token);\n  },\n\n  async generateRelationalData(tables, global_constraints, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/generate/relational`, { tables, global_constraints }, token);\n  },\n\n  async getHistory(token, API_BASE_URL) {\n    return this.request('GET', `${API_BASE_URL}/history`, null, token);\n  },\n\n  async augmentData(augmentRequest, token, API_BASE_URL) {\n    return this.request('POST', `${API_BASE_URL}/augment`, augmentRequest, token);\n  },\n\n  // UPDATED EXPORT FUNCTION with better error handling and debugging\n  async exportData(format, domain, rows, custom_prompt, token, API_BASE_URL) {\n    let url = `${API_BASE_URL}/export/${format}?domain=${domain}&rows=${rows}`;\n    if (custom_prompt) {\n      url += `&custom_prompt=${encodeURIComponent(custom_prompt)}`;\n    }\n\n    console.log('üîç Export URL:', url);\n    console.log('üîç Export format:', format);\n    console.log('üîç Export token:', token ? 'Present' : 'Missing');\n\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      console.log('üîç Export response status:', response.status);\n      console.log('üîç Export response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        let errorDetail = `HTTP ${response.status}: ${response.statusText}`;\n        try {\n          const errorData = await response.json();\n          errorDetail = errorData.detail || errorDetail;\n          console.error('üîç Export error data:', errorData);\n        } catch {\n          // Response might not be JSON for binary data\n          console.log('üîç Export error: Response not JSON (possibly binary data error)');\n        }\n        throw new Error(errorDetail);\n      }\n\n      console.log('üîç Export response successful');\n      return response; // Return the response for blob handling\n    } catch (error) {\n      console.error('üîç Export API error:', error);\n      throw error;\n    }\n  }\n};\n\nexport { api };\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}